---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-adservice
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: service
      targetPort: 8080
  selector:
    component: adservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-cartservice
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: service
      targetPort: 8080
  selector:
    component: cartservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-checkoutservice
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: service
      targetPort: 8080
    - port: 6060
      name: gospy
      targetPort: 6060
  selector:
    component: checkoutservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-currencyservice
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: service
      targetPort: 8080
  selector:
    component: currencyservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-emailservice
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: service
      targetPort: 8080
  selector:
    component: emailservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-featureflagservice
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 50053
      name: grpc
      targetPort: 50053
    - port: 8081
      name: http
      targetPort: 8081
  selector:
    component: featureflagservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-ffspostgres
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 5432
      name: postgres
      targetPort: 5432
  selector:
    component: ffspostgres
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-frontend
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: service
      targetPort: 8080
  selector:
    component: frontend
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-frontendproxy
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: service
      targetPort: 8080
  selector:
    component: frontendproxy
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-kafka
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 9092
      name: plaintext
      targetPort: 9092
    - port: 9093
      name: controller
      targetPort: 9093
  selector:
    component: kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-loadgenerator
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8089
      name: service
      targetPort: 8089
  selector:
    component: loadgenerator
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-paymentservice
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: service
      targetPort: 8080
  selector:
    component: paymentservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-productcatalogservice
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: service
      targetPort: 8080
    - port: 6060
      name: gospy
      targetPort: 6060
  selector:
    component: productcatalogservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-quoteservice
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: service
      targetPort: 8080
  selector:
    component: quoteservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-recommendationservice
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: service
      targetPort: 8080
  selector:
    component: recommendationservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-redis
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 6379
      name: redis
      targetPort: 6379
    - port: 16379
      targetPort: 16379
      name: gossip
  selector:
    component: redis
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-shippingservice
  labels:
    app: otel-demo-applicaton
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: service
      targetPort: 8080
  selector:
    component: shippingservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-accountingservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: accountingservice
  template:
    metadata:
      labels:
        component: accountingservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: accountingservice
        keptn.sh/version: 1.2.1
        keptn.sh/pre-deployment-tasks: kafka-check
    spec:
      containers:
        - name: accountingservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-accountingservice'
          imagePullPolicy: IfNotPresent
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: cumulative
            - name: KAFKA_SERVICE_ADDR
              value: 'example-kafka:9092'
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 20Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-adservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: adservice
  template:
    metadata:
      labels:
        component: adservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: adservice
        keptn.sh/version: 1.2.1
    spec:
      containers:
        - name: adservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-adservice'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: AD_SERVICE_PORT
              value: "8080"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 300Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-cartservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: cartservice
  template:
    metadata:
      labels:
        component: cartservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: cartservice
        keptn.sh/version: 1.2.1
        keptn.sh/pre-deployment-tasks: redis-check
    spec:
      containers:
        - name: cartservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-cartservice'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: ASPNETCORE_URLS
              value: http://*:8080
            - name: REDIS_ADDR
              value: 'example-redis.otel-demo.svc.cluster.local:6379'
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: CART_SERVICE_PORT
              value: "8080"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 160Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-checkoutservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: checkoutservice
  template:
    metadata:
      labels:
        component: checkoutservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: checkoutservice
        keptn.sh/version: 1.2.1
        keptn.sh/pre-deployment-tasks: productcatalogservice-check,kafka-check,cartservice-check,currency-check,payment-check,shipping-check
    spec:
      containers:
        - name: checkoutservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-checkoutservice'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: CART_SERVICE_ADDR
              value: 'example-cartservice:8080'
            - name: CURRENCY_SERVICE_ADDR
              value: 'example-currencyservice:8080'
            - name: PAYMENT_SERVICE_ADDR
              value: 'example-paymentservice:8080'
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: 'example-productcatalogservice:8080'
            - name: SHIPPING_SERVICE_ADDR
              value: 'example-shippingservice:8080'
            - name: EMAIL_SERVICE_ADDR
              value: http://example-emailservice:8080
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: CHECKOUT_SERVICE_PORT
              value: "8080"
            - name: KAFKA_SERVICE_ADDR
              value: 'example-kafka:9092'
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 20Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-currencyservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: currencyservice
  template:
    metadata:
      labels:
        component: currencyservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: currencyservice
        keptn.sh/version: 1.2.1
    spec:
      containers:
        - name: currencyservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-currencyservice'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: PORT
              value: "8080"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: CURRENCY_SERVICE_PORT
              value: "8080"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 20Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-emailservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: emailservice
  template:
    metadata:
      labels:
        component: emailservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: emailservice
        keptn.sh/version: 1.2.1
    spec:
      containers:
        - name: emailservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-emailservice'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: APP_ENV
              value: production
            - name: PORT
              value: "8080"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: http://localhost:4318/v1/traces
            - name: EMAIL_SERVICE_PORT
              value: "8080"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 100Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-featureflagservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: featureflagservice
  template:
    metadata:
      labels:
        component: featureflagservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: featureflagservice
        keptn.sh/version: 1.2.1
        # keptn.sh/pre-deployment-tasks: postgres-check
    spec:
      containers:
        - name: featureflagservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-featureflagservice'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 50053
              name: grpc
            - containerPort: 8081
              name: http
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: FEATURE_FLAG_GRPC_SERVICE_PORT
              value: "50053"
            - name: FEATURE_FLAG_SERVICE_PORT
              value: "8081"
            - name: OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
              value: grpc
            - name: DATABASE_URL
              value: ecto://ffs:ffs@example-ffspostgres:5432/ffs
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 175Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-ffspostgres
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: ffspostgres
  template:
    metadata:
      labels:
        component: ffspostgres
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: ffspostgres
        keptn.sh/version: 1.2.1
    spec:
      containers:
        - name: ffspostgres
          image: 'postgres:14'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: POSTGRES_DB
              value: ffs
            - name: POSTGRES_PASSWORD
              value: ffs
            - name: POSTGRES_USER
              value: ffs
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 120Mi
          securityContext:
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 999
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-frauddetectionservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: frauddetectionservice
  template:
    metadata:
      labels:
        component: frauddetectionservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: frauddetectionservice
        keptn.sh/version: 1.2.1
        keptn.sh/pre-deployment-tasks: kafka-check
    spec:
      containers:
        - name: frauddetectionservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-frauddetectionservice'
          imagePullPolicy: IfNotPresent
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: cumulative
            - name: KAFKA_SERVICE_ADDR
              value: 'example-kafka:9092'
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 200Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-frontend
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: frontend
  template:
    metadata:
      labels:
        component: frontend
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: frontend
        keptn.sh/version: 1.2.1
        keptn.sh/pre-deployment-tasks: adservice-check,cartservice-check,currency-check,checkout-check,productcatalogservice-check,recommandation-check,shipping-check
    spec:
      containers:
        - name: frontend
          image: 'ghcr.io/open-telemetry/demo:1.7.0-frontend'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: FRONTEND_ADDR
              value: :8080
            - name: AD_SERVICE_ADDR
              value: 'example-adservice:8080'
            - name: CART_SERVICE_ADDR
              value: 'example-cartservice:8080'
            - name: CHECKOUT_SERVICE_ADDR
              value: 'example-checkoutservice:8080'
            - name: CURRENCY_SERVICE_ADDR
              value: 'example-currencyservice:8080'
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: 'example-productcatalogservice:8080'
            - name: RECOMMENDATION_SERVICE_ADDR
              value: 'example-recommendationservice:8080'
            - name: SHIPPING_SERVICE_ADDR
              value: 'example-shippingservice:8080'
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: FRONTEND_PORT
              value: "8080"
            - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: https://otel-demo-collector.example.com/v1/traces
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 200Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-frontendproxy
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: frontendproxy
  template:
    metadata:
      labels:
        component: frontendproxy
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: frontendproxy
        keptn.sh/version: 1.2.1
        keptn.sh/pre-deployment-tasks: featureflag-check #, frontend-check
    spec:
      containers:
        - name: frontendproxy
          image: 'ghcr.io/open-telemetry/demo:v1.2.1-frontendproxy'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: FRONTEND_PORT
              value: "8080"
            - name: FRONTEND_HOST
              value: 'example-frontend'
            - name: FEATURE_FLAG_SERVICE_PORT
              value: "8081"
            - name: FEATURE_FLAG_SERVICE_HOST
              value: 'example-featureflagservice'
            - name: LOCUST_WEB_PORT
              value: "8089"
            - name: LOCUST_WEB_HOST
              value: 'example-loadgenerator'
            - name: GRAFANA_SERVICE_PORT
              value: "80"
            - name: GRAFANA_SERVICE_HOST
              value: 'example-grafana'
            - name: JAEGER_SERVICE_PORT
              value: "16686"
            - name: JAEGER_SERVICE_HOST
              value: 'example-jaeger-query'
            - name: OTEL_COLLECTOR_PORT
              value: "4317"
            - name: OTEL_COLLECTOR_HOST
              value: 'localhost'
            - name: ENVOY_PORT
              value: "8080"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 30Mi
          securityContext:
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-kafka
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: kafka
  template:
    metadata:
      labels:
        component: kafka
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: kafka
        keptn.sh/version: 1.2.1
    spec:
      containers:
        - name: kafka
          image: 'ghcr.io/open-telemetry/demo:1.7.0-kafka'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 9092
              name: plaintext
            - containerPort: 9093
              name: controller
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://example-kafka:9092
          resources:
            limits:
              memory: 600Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-loadgenerator
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: loadgenerator
  template:
    metadata:
      labels:
        component: loadgenerator
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: loadgenerator
        keptn.sh/version: 1.2.1
        # keptn.sh/pre-deployment-tasks: frontend-check
    spec:
      containers:
        - name: loadgenerator
          image: 'ghcr.io/open-telemetry/demo:1.7.0-loadgenerator'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8089
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: FRONTEND_ADDR
              value: 'example-frontend:8080'
            - name: LOCUST_WEB_PORT
              value: "8089"
            - name: LOCUST_USERS
              value: "10"
            - name: LOCUST_SPAWN_RATE
              value: "1"
            - name: LOCUST_HOST
              value: http://$(FRONTEND_ADDR)
            - name: LOCUST_HEADLESS
              value: "false"
            - name: LOCUST_AUTOSTART
              value: "true"
            - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
              value: python
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: LOADGENERATOR_PORT
              value: "8089"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 120Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-paymentservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: paymentservice
  template:
    metadata:
      labels:
        component: paymentservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: paymentservice
        keptn.sh/version: 1.2.1
    spec:
      containers:
        - name: paymentservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-paymentservice'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: PAYMENT_SERVICE_PORT
              value: "8080"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 70Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-productcatalogservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: productcatalogservice
  template:
    metadata:
      labels:
        component: productcatalogservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: productcatalogservice
        keptn.sh/version: 1.2.1
    spec:
      containers:
        - name: productcatalogservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-productcatalogservice'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: PRODUCT_CATALOG_SERVICE_PORT
              value: "8080"
            - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
              value: 'example-featureflagservice:50053'
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 20Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-quoteservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: quoteservice
  template:
    metadata:
      labels:
        component: quoteservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: quoteservice
        keptn.sh/version: 1.2.1
    spec:
      containers:
        - name: quoteservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-quoteservice'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_TRACES_SAMPLER
              value: parentbased_always_on
            - name: OTEL_TRACES_EXPORTER
              value: otlp
            - name: OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
              value: http/protobuf
            - name: OTEL_PHP_TRACES_PROCESSOR
              value: simple
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4318
            - name: QUOTE_SERVICE_PORT
              value: "8080"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 40Mi
          securityContext:
            runAsGroup: 33
            runAsNonRoot: true
            runAsUser: 33
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-recommendationservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: recommendationservice
  template:
    metadata:
      labels:
        component: recommendationservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: recommendationservice
        keptn.sh/version: 1.2.1
        keptn.sh/pre-deployment-tasks: featureflag-check,productcatalogservice-check
    spec:
      containers:
        - name: recommendationservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-recommendationservice'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_PYTHON_LOG_CORRELATION
              value: "true"
            - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
              value: python
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
              value: 'example-featureflagservice:50053'
            - name: RECOMMENDATION_SERVICE_PORT
              value: "8080"
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: 'example-productcatalogservice:8080'
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 500Mi
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-redis
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: redis
  template:
    metadata:
      labels:
        component: redis
      annotations:
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: redis
        keptn.sh/version: 1.2.1
    spec:
      containers:
        - name: redis
          image: 'redis:alpine'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6379
              name: redis
            - containerPort: 16379
              name: gossip
          command: ["redis-server"]
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 20Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 999
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-shippingservice
  labels:
    app: otel-demo-applicaton
spec:
  selector:
    matchLabels:
      component: shippingservice
  template:
    metadata:
      labels:
        component: shippingservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        keptn.sh/app: otel-demo-applicaton
        keptn.sh/workload: shippingservice
        keptn.sh/version: 1.2.1
    spec:
      containers:
        - name: shippingservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-shippingservice'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: PORT
              value: "8080"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://localhost:4317
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: http://localhost:4317
            - name: SHIPPING_SERVICE_PORT
              value: "8080"
            - name: QUOTE_SERVICE_ADDR
              value: http://example-quoteservice:8080
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 20Mi
