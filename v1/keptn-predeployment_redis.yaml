# apiVersion: lifecycle.keptn.sh/v1beta1
# kind: KeptnTaskDefinition
# metadata:
#   name: redis-check
# spec:
#   function:
#     inline:
#       code: |
#         // wait_for_redis.ts

#         const hostname = "example-redis";
#         const port = 6379;

#         async function waitForRedis() {
#           let connected = false;
#           let attempts = 0;

#           while (!connected && attempts < 15) { // 15 attempts with a 2-second delay each
#             try {
#               await Deno.connect({ hostname, port });
#               connected = true;
#             } catch (error) {
#               console.log("Waiting for Redis...");
#               await sleep(2000);
#               attempts++;
#             }
#           }

#           if (connected) {
#             console.log("Connected to Redis!");
#           } else {
#             console.error("Failed to connect to Redis after multiple attempts.");
#             Deno.exit(1);
#           }
#         }

#         function sleep(ms: number) {
#           return new Promise((resolve) => setTimeout(resolve, ms));
#         }

#         waitForRedis();


apiVersion: lifecycle.keptn.sh/v1alpha2
kind: KeptnTaskDefinition
metadata:
  name: redis-check
spec:
  function:
    httpRef:
      url: https://raw.githubusercontent.com/keptn/lifecycle-toolkit/main/runtimes/deno-runtime/samples/ts/dns.ts
    parameters:
      map:
        host: example-redis

        # import { connect as redisConnect } from 'https://deno.land/x/redis/mod.ts';

        # try {
        #     const redisClient = await redisConnect({
        #         hostname: 'example-redis.otel-demo.svc.cluster.local:6379',
        #         port: 6379,
        #         maxRetryCount: 30
        #     });

        #     await redisClient.ping();
        #     console.log('Connected to Redis');
        # } catch (error) {
        #     console.error('Could not connect to Redis:', error);
        #     Deno.exit(1);
        # }